version: '3.8'

services:
  # Nginx Proxy Manager - 反向代理管理
  nginx-proxy-manager:
    image: 'jc21/nginx-proxy-manager:latest'
    container_name: nginx-proxy-manager
    restart: always
    ports:
      - '80:80'
      - '81:81'
      - '443:443'
    environment:
      TZ: "Asia/Shanghai"
      DB_MYSQL_HOST: "mysql"
      DB_MYSQL_PORT: "3306"
      DB_MYSQL_USER: "npm"
      DB_MYSQL_PASSWORD: "npm"
      DB_MYSQL_NAME: "npm"
    volumes:
      - ./data/npm:/data
      - ./data/letsencrypt:/etc/letsencrypt
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - tg2em-network

  # MySQL 数据库
  mysql:
    image: mysql:8.0
    container_name: tg2em-mysql
    restart: always
    environment:
      TZ: "Asia/Shanghai"
      MYSQL_ROOT_PASSWORD: "tg2emall"
      MYSQL_DATABASE: "tg2em"
      MYSQL_USER: "tg2emall"
      MYSQL_PASSWORD: "tg2emall"
      # Nginx Proxy Manager 数据库配置
      MYSQL_DATABASE_NPM: "npm"
      MYSQL_USER_NPM: "npm"
      MYSQL_PASSWORD_NPM: "npm"
    volumes:
      - ./data/mysql:/var/lib/mysql
      # 只在数据库不存在时执行初始化脚本
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./init-npm.sql:/docker-entrypoint-initdb.d/init-npm.sql:ro
    command:
      - '--character-set-server=utf8mb4'
      - '--collation-server=utf8mb4_unicode_ci'
      - '--max_connections=1000'
      - '--default-authentication-plugin=mysql_native_password'
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - tg2em-network

  # 前端展示系统
  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile
    container_name: tg2em-frontend
    restart: always
    ports:
      - "8000:8000"
    environment:
      TZ: "Asia/Shanghai"
      MYSQL_HOST: "mysql"
      MYSQL_DATABASE: "tg2em"
      MYSQL_USER: "tg2emall"
      MYSQL_PASSWORD: "tg2emall"
      SECRET_KEY: "tg2emall-secret-key-2024"
      FRONTEND_PORT: "8000"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - tg2em-network

  # tgState 图片上传服务
  tgstate:
    build:
      context: ./services/tgstate
      dockerfile: Dockerfile
    container_name: tg2em-tgstate
    restart: always
    ports:
      - "8001:8001"  # 管理服务端口
      - "8002:8002"  # 上传服务端口
      - "8088:8088"  # 管理页面端口
    environment:
      TZ: "Asia/Shanghai"
      # tgState 配置参数
      TOKEN: "${TGSTATE_TOKEN:-}"
      TARGET: "${TGSTATE_TARGET:-}"
      PASS: "${TGSTATE_PASS:-none}"
      MODE: "${TGSTATE_MODE:-p}"
      URL: "${TGSTATE_URL:-http://your-domain.com:8088}"
      PORT: "8001"
      # 公网访问地址
      PUBLIC_URL: "${PUBLIC_URL:-http://your-domain.com:8088}"
    # volumes: 图片存储在Telegram频道，无需本地存储
    networks:
      - tg2em-network

  # Telegram 采集服务
  tg2em-scrape:
    build:
      context: ./services/tg2em
      dockerfile: Dockerfile
    container_name: tg2em-scrape
    restart: always
    stdin_open: true  # 保持stdin开放
    tty: true         # 分配TTY
    ports:
      - "2003:2003"  # 管理服务端口
      - "5002:5002"  # 采集服务端口
    environment:
      TZ: "Asia/Shanghai"
      MYSQL_HOST: "mysql"
      MYSQL_DATABASE: "tg2em"
      MYSQL_USER: "tg2emall"
      MYSQL_PASSWORD: "tg2emall"
      API_ID: "${API_ID}"
      API_HASH: "${API_HASH}"
      PHONE_NUMBER: "${PHONE_NUMBER}"
      TELEGRAM_VERIFICATION_TIMEOUT: "${TELEGRAM_VERIFICATION_TIMEOUT:-600}"
      TGSTATE_URL: "http://tgstate:8001"
    volumes:
      - ./data/uploads:/app/upload
      - ./data/telegram-sessions:/app/sessions
      - ./data/logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
      tgstate:
        condition: service_started
    networks:
      - tg2em-network



volumes:
  telegram-sessions:
  logs:
  upload:

networks:
  tg2em-network:
    driver: bridge